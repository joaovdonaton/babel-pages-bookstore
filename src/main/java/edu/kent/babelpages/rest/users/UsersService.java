package edu.kent.babelpages.rest.users;

import edu.kent.babelpages.lib.security.JWTService;
import edu.kent.babelpages.rest.users.DTO.UserCreationDTO;
import edu.kent.babelpages.rest.users.DTO.UserCredentialsDTO;
import edu.kent.babelpages.rest.users.DTO.UserInfoDTO;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class UsersService {
    private final UsersDAO usersDAO;
    private final PasswordEncoder passwordEncoder;
    private final JWTService jwtService;

    public UsersService(UsersDAO usersDAO, PasswordEncoder passwordEncoder, JWTService jwtService) {
        this.usersDAO = usersDAO;
        this.passwordEncoder = passwordEncoder;
        this.jwtService = jwtService;
    }

    public UserInfoDTO createUser(UserCreationDTO userCreationDTO){
        // hash password
        userCreationDTO.setPassword(passwordEncoder.encode(userCreationDTO.getPassword()));

        User u = new User(userCreationDTO);
        usersDAO.createUser(u);

        // retrieve user with UUID generated by MySQL
        u = usersDAO.findByUsername(u.getUsername());

        return new UserInfoDTO(u.getId(), u.getUsername(), u.getROLE(), u.getCreated_at());
    }

    public String login(UserCredentialsDTO userCredentialsDTO){
        User u = usersDAO.findByUsername(userCredentialsDTO.getUsername());

        if(!passwordEncoder.matches(userCredentialsDTO.getPassword(), u.getPasswordHash())){
            return "Wrong password";
        }

        return jwtService.createToken(new UserInfoDTO(
                u.getId(),
                u.getUsername(),
                u.getROLE(),
                u.getCreated_at()
        ));
    }
}
